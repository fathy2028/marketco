services:
  # Infrastructure Services
  mysql:
    image: mysql:8.0
    container_name: mysql-product-db
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: productdb
      MYSQL_USER: product_user
      MYSQL_PASSWORD: product_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - ecommerce-network

  postgres-auth:
    image: postgres:15
    container_name: postgres-auth-db
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U auth_user -d authdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  postgres-order:
    image: postgres:15
    container_name: postgres-order-db
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: order_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_order_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver-payment-db
    environment:
      SA_PASSWORD: PaymentPassword123!
      ACCEPT_EULA: Y
      MSSQL_PID: Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - ecommerce-network

  redis:
    image: redis:7-alpine
    container_name: redis-cart
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-broker
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq_user
      RABBITMQ_DEFAULT_PASS: rabbitmq_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ecommerce-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ecommerce-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - ecommerce-network

  # Java Spring Boot Services
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ecommerce-network

  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - ecommerce-network

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://discovery-service:8761/eureka
      DATABASE_URL: jdbc:postgresql://postgres-auth:5432/authdb
      DATABASE_USERNAME: auth_user
      DATABASE_PASSWORD: auth_password
      JWT_SECRET: mySecretKey123456789012345678901234567890123456789012345678901234567890
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      postgres-auth:
        condition: service_healthy
    networks:
      - ecommerce-network

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://discovery-service:8761/eureka
      DATABASE_URL: jdbc:mysql://mysql:3306/productdb
      DATABASE_USERNAME: product_user
      DATABASE_PASSWORD: product_password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: rabbitmq_user
      RABBITMQ_PASSWORD: rabbitmq_password
    depends_on:
      - config-server
      - discovery-service
      - mysql
      - rabbitmq
    networks:
      - ecommerce-network

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://discovery-service:8761/eureka
      DATABASE_URL: jdbc:postgresql://postgres-order:5432/orderdb
      DATABASE_USERNAME: order_user
      DATABASE_PASSWORD: order_password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: rabbitmq_user
      RABBITMQ_PASSWORD: rabbitmq_password
    depends_on:
      - config-server
      - discovery-service
      - postgres-order
      - rabbitmq
    networks:
      - ecommerce-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://discovery-service:8761/eureka
    depends_on:
      - config-server
      - discovery-service
      - auth-service
      - product-service
      - order-service
    networks:
      - ecommerce-network

  # .NET Core Services
  cart-service:
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    container_name: cart-service
    ports:
      - "5001:5001"
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
      Redis__ConnectionString: redis:6379
      RabbitMQ__Host: rabbitmq
      RabbitMQ__Username: rabbitmq_user
      RabbitMQ__Password: rabbitmq_password
      Eureka__ServiceUrl: http://discovery-service:8761/eureka
    depends_on:
      - redis
      - rabbitmq
      - discovery-service
    networks:
      - ecommerce-network

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "5002:5002"
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
      ConnectionStrings__DefaultConnection: Server=sqlserver;Database=PaymentDB;User Id=sa;Password=PaymentPassword123!;TrustServerCertificate=true
      RabbitMQ__Host: rabbitmq
      RabbitMQ__Username: rabbitmq_user
      RabbitMQ__Password: rabbitmq_password
      Eureka__ServiceUrl: http://discovery-service:8761/eureka
    depends_on:
      - sqlserver
      - rabbitmq
      - discovery-service
    networks:
      - ecommerce-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "4200:80"
    environment:
      API_GATEWAY_URL: http://api-gateway:8080
    depends_on:
      - api-gateway
    networks:
      - ecommerce-network

volumes:
  mysql_data:
  postgres_auth_data:
  postgres_order_data:
  sqlserver_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:


networks:
  ecommerce-network:
    driver: bridge
